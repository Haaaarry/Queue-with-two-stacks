//把一个数组一分为二，左边用于入队，右边用于出队


class QueueWithTwoStacks{
    private doublle []data;
    private int top1,top2;
    
    public QueueWithTwoStacks(){
        data=new double [1];
        top1=top2=0;
    }
    
    
    public boolean isEmpty(){
        return top1==top2;
    }
    
    
    public double dequeue(){
         if(isEmpty()){
            top1=top2=data.length/2;//每次发现队列为空，设置top1，top2在中间，防止数组最终挤在一端
            throws new IllegalArgumentException("Dequeuing an empty queue!");
         }
         double item=data[top2];
         data[top2--]=null;
         if(top2-top1==data.length/4)  resize(data.length/2);
         return item;
    }
    
    
    public double enqueue(double item){
        if(top1==-1)  resize(data.length*2);
        data[top1--]=item;
    }

    public resize(int capability){
        double []copy=new[capability];
        for(int i=0;i<top2-top1;i++)
            copy[capability/4+i]=data[top1+i+1];
        data=copy;
    }
}
